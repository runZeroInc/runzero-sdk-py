#!/bin/sh

# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#

DEBUG=$(test -n "$DEBUG_GIT_HOOK")

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

emsg() {
  >&2 echo "Error: $*"
}

failhook() {
	if test $# -ne 0; then
    emsg "$1"
  fi

  >&2 echo "This is a client-side git hook check failure"
  >&2 echo "You may break the build, but if you must ignore this check pass '--no-verify' to git and retry"
  exit 1
}

while read local_ref local_oid remote_ref remote_oid
do
  if test -n "$DEBUG"; then
    >&2 echo "Running pre-push hook: local_ref is: $local_ref, local_oid is: $local_oid"
    >&2 echo "remote_ref is: $remote_ref, remote_oid is: $remote_oid"
    >&2 echo "executing git diff --name-only $remote_oid $local_oid"
  fi

	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero";then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi
    files=$(git diff --name-only "$remote_oid" "$local_oid")
		test -n "$files" || { >&2 echo "No files to push"; exit 0; }
    >&2 printf "checking %s\n" "$files"
    make fmt mypy lint || { emsg "Failed pre-push content checks"; failhook; }
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
	fi
done

unset failhook

exit 0

